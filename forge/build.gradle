plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    common(project(":boxlib-base"))  { transitive false }
    common(project(":boxlib-client-utils"))  { transitive false }
    common(project(":boxlib-client-commands-forge"))  { transitive false }
    common(project(":boxlib-config-file"))  { transitive false }
    common(project(":boxlib-config-gui"))  { transitive false }
    common(project(":boxlib-http"))  { transitive false }
    common(project(":boxlib-math"))  { transitive false }
    common(project(":boxlib-scheduling"))  { transitive false }

    shadowCommon(project(path: ":boxlib-base"))  { transitive false }
    shadowCommon(project(path: ":boxlib-client-utils"))  { transitive false }
    shadowCommon(project(path: ":boxlib-config-file"))  { transitive false }
    shadowCommon(project(path: ":boxlib-config-gui"))  { transitive false }
    shadowCommon(project(path: ":boxlib-http"))  { transitive false }
    shadowCommon(project(path: ":boxlib-math"))  { transitive false }
    shadowCommon(project(path: ":boxlib-scheduling"))  { transitive false }

    // forge specific modules
    shadowCommon(project(path: ":boxlib-client-commands-forge"))
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
