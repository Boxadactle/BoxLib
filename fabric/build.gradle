plugins {
    id 'com.github.johnrengelman.shadow'
    id "me.shedaniel.unified-publishing"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
//    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    common(project(path: ':boxlib-command', configuration: "namedElements")) { transitive false }
    common(project(path: ':boxlib-config', configuration: "namedElements")) { transitive false }
    common(project(path: ':boxlib-functions', configuration: "namedElements")) { transitive false }
    common(project(path: ':boxlib-gui', configuration: "namedElements")) { transitive false }
    common(project(path: ":boxlib-http", configuration: "namedElements")) { transitive false }
    common(project(path: ':boxlib-keybind', configuration: "namedElements")) { transitive false }
    common(project(path: ':boxlib-layouts', configuration: "namedElements")) { transitive false }
    common(project(path: ':boxlib-math', configuration: "namedElements")) { transitive false }
    common(project(path: ':boxlib-prompt', configuration: "namedElements")) { transitive false }
    common(project(path: ':boxlib-scheduling', configuration: "namedElements")) { transitive false }
    common(project(path: ':boxlib-translate', configuration: "namedElements")) { transitive false }

    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
    shadowBundle project(path: ':boxlib-command', configuration: "transformProductionFabric")
    shadowBundle project(path: ':boxlib-config', configuration: "transformProductionFabric")
    shadowBundle project(path: ':boxlib-functions', configuration: "transformProductionFabric")
    shadowBundle project(path: ':boxlib-gui', configuration: "transformProductionFabric")
    shadowBundle project(path: ":boxlib-http", configuration: "transformProductionFabric")
    shadowBundle project(path: ':boxlib-keybind', configuration: "transformProductionFabric")
    shadowBundle project(path: ':boxlib-layouts', configuration: "transformProductionFabric")
    shadowBundle project(path: ':boxlib-math', configuration: "transformProductionFabric")
    shadowBundle project(path: ':boxlib-prompt', configuration: "transformProductionFabric")
    shadowBundle project(path: ':boxlib-scheduling', configuration: "transformProductionFabric")
    shadowBundle project(path: ':boxlib-translate', configuration: "transformProductionFabric")
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}

unifiedPublishing {
    project {
        displayName = "[Fabric ${rootProject.minecraft_version}] v$rootProject.mod_version"
        version = "$rootProject.version-fabric"
        changelog = "A changelog can be found here: https://github.com/Boxadactle/BoxLib/releases/tag/$rootProject.mod_version"
        releaseType = rootProject.release_type
        gameVersions = Arrays.asList(rootProject.game_versions.split(","))
        gameLoaders = [ "fabric", "quilt" ]

        mainPublication tasks.remapJar

        var cfToken = System.getenv("CURSEFORGE_TOKEN")
        if (cfToken != null) {
            curseforge {
                token = cfToken
                id = rootProject.project_id_curseforge
            }
        }

        var modrinthToken = System.getenv("MODRINTH_TOKEN")
        if (modrinthToken != null) {
            modrinth {
                token = modrinthToken
                id = rootProject.project_id_modrinth
                version = "${rootProject.mod_version}-${project.name}"
            }
        }
    }
}