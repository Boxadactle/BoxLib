plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    common rootProject.enabled_platforms.split(',')
}

configurations {
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    // We depend on Fabric Loader here to use the Fabric @Environment annotations,
    // which get remapped to the correct annotations on each platform.
    // Do NOT use other classes from Fabric Loader.
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    implementation project(path: ":boxlib-functions", configuration: "namedElements")
    implementation project(path: ":boxlib-math", configuration: "namedElements")

    shadowBundle project(path: ':boxlib-command', configuration: "namedElements")
    shadowBundle project(path: ':boxlib-config', configuration: "namedElements")
    shadowBundle project(path: ':boxlib-functions', configuration: "namedElements")
    shadowBundle project(path: ':boxlib-gui', configuration: "namedElements")
    shadowBundle project(path: ":boxlib-http", configuration: "namedElements")
    shadowBundle project(path: ':boxlib-keybind', configuration: "namedElements")
    shadowBundle project(path: ':boxlib-layouts', configuration: "namedElements")
    shadowBundle project(path: ':boxlib-math', configuration: "namedElements")
    shadowBundle project(path: ':boxlib-prompt', configuration: "namedElements")
    shadowBundle project(path: ':boxlib-scheduling', configuration: "namedElements")
    shadowBundle project(path: ':boxlib-translate', configuration: "namedElements")
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}